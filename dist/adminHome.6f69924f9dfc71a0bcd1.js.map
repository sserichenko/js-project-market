{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///(webpack)/buildin/global.js","webpack:///./src/js/indexadmin.js","webpack:///./node_modules/q/q.js","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./src/page-admin-home/main.js","webpack:///./node_modules/process/browser.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","g","this","Function","e","window","server","location","origin","serverURL","hostname","indexOf","modal","document","getElementById","btn","span","getElementsByClassName","cancelButton","querySelector","input","output","buttonLogin","userLogin","userRegistration","onclick","textContent","style","display","event","target","addEventListener","email","password","console","log","preventDefault","fetch","concat","method","headers","content-type","Authorization","body","JSON","stringify","then","res","json","data","localStorage","getItem","setItem","token","href","process","setImmediate","definition","bootstrap","hasStacks","Error","stack","noop","qFileName","qStartingLine","captureLine","nextTick","head","task","next","tail","flushing","requestTick","isNodeJS","laterQueue","flush","domain","enter","runSingle","length","pop","exit","setTimeout","toString","MessageChannel","channel","port1","onmessage","requestPortTick","port2","postMessage","runAfter","push","uncurryThis","f","apply","arguments","QReturnValue","array_slice","Array","slice","array_reduce","reduce","callback","basis","index","TypeError","array_indexOf","array_map","map","thisp","self","collect","undefined","object_create","Type","object_defineProperty","obj","prop","descriptor","object_hasOwnProperty","object_keys","keys","object_toString","ReturnValue","STACK_JUMP_SEPARATOR","makeStackTraceLong","error","promise","stacks","source","__minimumStackCounter__","stackCounter","configurable","unshift","stackString","lines","split","desiredLines","line","isInternalFrame","stackLine","join","filterStackString","getFileNameAndLineNumber","attempt1","exec","Number","attempt2","attempt3","fileNameAndLineNumber","fileName","lineNumber","qEndingLine","Q","Promise","isPromiseAlike","deferred","defer","resolve","reject","notify","exception","coerce","fulfill","longStackSupport","longStackCounter","resolvedPromise","messages","progressListeners","promiseDispatch","op","operands","args","valueOf","nearerValue","nearer","isPromise","inspect","state","substring","become","newPromise","message","reason","progress","progressListener","resolver","race","answerPs","len","fallback","result","inspected","when","fulfilled","rejected","progressed","isObject","env","Q_DEBUG","makeNodeResolver","all","passByCopy","x","y","that","spread","makePromise","done","_fulfilled","newException","_rejected","newValue","threw","_progressed","onerror","tap","fcall","thenResolve","thenReject","isPending","isFulfilled","isRejected","alternative","unhandledReasons","unhandledRejections","reportedUnhandledRejections","trackUnhandledRejections","resetUnhandledRejections","rejection","at","emit","atReport","splice","untrackRejection","trackRejection","set","rhs","delete","post","dispatch","promises","pendingCount","snapshot","any","prev","current","err","allResolved","getUnhandledReasons","stopUnhandledRejectionTracking","master","isDef","array","async","makeGenerator","continuer","verb","arg","StopIteration","generator","errback","isStopIteration","spawn","promised","del","mapply","send","mcall","invoke","fapply","fbind","warn","allSettled","regardless","fail","fin","onUnhandledError","timeout","ms","timeoutId","code","clearTimeout","delay","nfapply","nodeArgs","nfcall","nfbind","denodeify","baseArgs","nbind","nmapply","npost","nsend","nmcall","ninvoke","nodeify","nodeback","noConflict","global","scope","Timeout","id","clearFn","_id","_clearFn","setInterval","clearInterval","close","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","clearImmediate","registerImmediate","html","messagePrefix","nextHandle","tasksByHandle","currentlyRunningATask","doc","attachTo","getPrototypeOf","handle","runIfPresent","importScripts","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","Math","random","onGlobalMessage","attachEvent","createElement","documentElement","script","onreadystatechange","removeChild","appendChild","run","__webpack_exports__","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","title","browser","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask"],"mappings":"aACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,sBClFA,IAAAC,EAGAA,EAAA,WACA,OAAAC,KADA,GAIA,IAEAD,KAAA,IAAAE,SAAA,iBACC,MAAAC,GAED,iBAAAC,SAAAJ,EAAAI,QAOArC,EAAAD,QAAAkC,mCCnBApC,EAAA,QAEMyC,EAASD,OAAOE,SAASC,OACzBC,GACmD,IAAnDJ,OAAOE,SAASG,SAASC,QAAQ,aAC7B,wBACAL,EAGJM,EAAQC,SAASC,eAAe,WAGhCC,EAAMF,SAASC,eAAe,SAG9BE,EAAOH,SAASI,uBAAuB,eAAe,GACtDC,EAAeL,SAASM,cAAc,cACtCC,EAAQP,SAASM,cAAc,aAC/BE,EAASR,SAASM,cAAc,iBAEhCG,GADcT,SAASM,cAAc,oBACvBN,SAASM,cAAc,kBAErCI,GADiBV,SAASC,eAAe,YAC7BD,SAASC,eAAe,cACtCU,EAAmB,GAOvBT,EAAIU,QAAU,YACPV,EAAIW,YAAc,YACrBd,EAAMe,MAAMC,QAAU,UAK1BZ,EAAKS,QAAU,WACbb,EAAMe,MAAMC,QAAU,QAIxBvB,OAAOoB,QAAU,SAASI,GACpBA,EAAMC,QAAUlB,IAClBA,EAAMe,MAAMC,QAAU,SAI1BV,EAAaO,QAAU,SAASI,GAC1BA,EAAMC,SAAWZ,IACnBN,EAAMe,MAAMC,QAAU,SAI1BR,EAAMW,iBAAiB,QAAS,SAAA3B,GAE9BoB,EAAiBQ,MAAQ5B,EAAE0B,OAAO5C,QAYpCmC,EAAOU,iBAAiB,QAAS,SAAA3B,GAK/BoB,EAAiBS,SAAW7B,EAAE0B,OAAO5C,QAGvCgD,QAAQC,IAAIX,GACZU,QAAQC,IAAId,GAEZC,EAAYS,iBAAiB,QAAS,SAAA3B,GACpCyB,MAAMO,iBAENC,MAAK,GAAAC,OAAI7B,EAAJ,oBAAiC,CACpC8B,OAAQ,OACRC,QAAS,CACPC,eAAgB,mBAChBC,cACE,sLAEJC,KAAMC,KAAKC,UAAUrB,KAEpBsB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIf,QAAQC,IAAI,OAAQc,KAEpCrC,EAAMe,MAAMC,QAAU,OACtBP,EAAOnC,MAAQ,GACfkC,EAAMlC,MAAQ,GAEdqC,EAAUQ,iBAAiB,QAAS,SAAA3B,GAClCyB,MAAMO,iBACNxB,EAAMe,MAAMC,QAAU,OACtBP,EAAOnC,MAAQ,GACfkC,EAAMlC,MAAQ,GACdmD,MAAK,GAAAC,OAAI7B,EAAJ,oBAAiC,CACpC8B,OAAQ,OACRC,QAAS,CACPC,eAAgB,mBAChBC,cACE,sLAEJC,KAAMC,KAAKC,UAAUrB,KAEpBsB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAEAC,aAAaC,QAAQ,WAGvBD,aAAaE,QAAQ,QAASH,EAAKI,OACnCxC,SAASN,SAAS+C,KAAO,kDCvHnC,SAAAC,EAAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4BA,SAAAC,GACA,aAQA,mBAAAC,UACAA,UAAA,UAAAD,GAIAzF,EAAAD,QAAA0F,IAdA,CAkDC,WACD,aAEA,IAAAE,GAAA,EACA,IACA,UAAAC,MACC,MAAAxD,GACDuD,IAAAvD,EAAAyD,MAWA,SAAAC,KANA,IACAC,EADAC,EAAAC,IAUAC,EAAA,WAEA,IAAAC,EAAA,CAAgBC,UAAA,EAAAC,KAAA,MAChBC,EAAAH,EACAI,GAAA,EACAC,OAAA,EACAC,GAAA,EAEAC,EAAA,GAEA,SAAAC,IAIA,IAFA,IAAAP,EAAAQ,EAEAT,EAAAE,MAEAD,GADAD,IAAAE,MACAD,KACAD,EAAAC,UAAA,GACAQ,EAAAT,EAAAS,UAGAT,EAAAS,YAAA,EACAA,EAAAC,SAEAC,EAAAV,EAAAQ,GAGA,KAAAF,EAAAK,QAEAD,EADAV,EAAAM,EAAAM,OAGAT,GAAA,EAGA,SAAAO,EAAAV,EAAAQ,GACA,IACAR,IAES,MAAAhE,GACT,GAAAqE,EAeA,MARAG,GACAA,EAAAK,OAEAC,WAAAP,EAAA,GACAC,GACAA,EAAAC,QAGAzE,EAKA8E,WAAA,WACA,MAAA9E,GACiB,GAIjBwE,GACAA,EAAAK,OAiBA,GAbAf,EAAA,SAAAE,GACAE,IAAAD,KAAA,CACAD,OACAQ,OAAAH,GAAAlB,EAAAqB,OACAP,KAAA,MAGAE,IACAA,GAAA,EACAC,MAIA,iBAAAjB,GACA,qBAAAA,EAAA4B,YAAA5B,EAAAW,SASAO,GAAA,EAEAD,EAAA,WACAjB,EAAAW,SAAAS,SAGK,sBAAAnB,EAGLgB,EADA,oBAAAnE,OACAmD,EAAA/D,KAAAY,OAAAsE,GAEA,WACAnB,EAAAmB,SAIK,uBAAAS,eAAA,CAGL,IAAAC,EAAA,IAAAD,eAGAC,EAAAC,MAAAC,UAAA,WACAf,EAAAgB,GACAH,EAAAC,MAAAC,UAAAZ,MAGA,IAAAa,EAAA,WAGAH,EAAAI,MAAAC,YAAA,IAEAlB,EAAA,WACAU,WAAAP,EAAA,GACAa,UAKAhB,EAAA,WACAU,WAAAP,EAAA,IAaA,OAPAT,EAAAyB,SAAA,SAAAvB,GACAM,EAAAkB,KAAAxB,GACAG,IACAA,GAAA,EACAC,MAGAN,EAlJA,GA+JA9F,EAAA+B,SAAA/B,KACA,SAAAyH,EAAAC,GACA,kBACA,OAAA1H,EAAA2H,MAAAD,EAAAE,YAOA,IA+FAC,EA/FAC,EAAAL,EAAAM,MAAAtG,UAAAuG,OAEAC,EAAAR,EACAM,MAAAtG,UAAAyG,QAAA,SAAAC,EAAAC,GACA,IAAAC,EAAA,EACA1B,EAAA7E,KAAA6E,OAEA,OAAAiB,UAAAjB,OAGA,QACA,GAAA0B,KAAAvG,KAAA,CACAsG,EAAAtG,KAAAuG,KACA,MAEA,KAAAA,GAAA1B,EACA,UAAA2B,UAKA,KAAcD,EAAA1B,EAAgB0B,IAE9BA,KAAAvG,OACAsG,EAAAD,EAAAC,EAAAtG,KAAAuG,OAGA,OAAAD,IAIAG,EAAAd,EACAM,MAAAtG,UAAAc,SAAA,SAAAzB,GAEA,QAAAjB,EAAA,EAAuBA,EAAAiC,KAAA6E,OAAiB9G,IACxC,GAAAiC,KAAAjC,KAAAiB,EACA,OAAAjB,EAGA,WAIA2I,EAAAf,EACAM,MAAAtG,UAAAgH,KAAA,SAAAN,EAAAO,GACA,IAAAC,EAAA7G,KACA8G,EAAA,GAIA,OAHAX,EAAAU,EAAA,SAAAE,EAAA/H,EAAAuH,GACAO,EAAApB,KAAAW,EAAAnI,KAAA0I,EAAA5H,EAAAuH,EAAAM,UACS,GACTC,IAIAE,EAAAvI,OAAAY,QAAA,SAAAM,GACA,SAAAsH,KAEA,OADAA,EAAAtH,YACA,IAAAsH,GAGAC,EAAAzI,OAAAC,gBAAA,SAAAyI,EAAAC,EAAAC,GAEA,OADAF,EAAAC,GAAAC,EAAArI,MACAmI,GAGAG,EAAA3B,EAAAlH,OAAAkB,UAAAC,gBAEA2H,EAAA9I,OAAA+I,MAAA,SAAA/H,GACA,IAAA+H,EAAA,GACA,QAAAlI,KAAAG,EACA6H,EAAA7H,EAAAH,IACAkI,EAAA9B,KAAApG,GAGA,OAAAkI,GAGAC,EAAA9B,EAAAlH,OAAAkB,UAAAsF,UAoBAc,EADA,oBAAA2B,YACAA,YAEA,SAAA1I,GACAgB,KAAAhB,SAMA,IAAA2I,EAAA,uBAEA,SAAAC,EAAAC,EAAAC,GAGA,GAAArE,GACAqE,EAAAnE,OACA,iBAAAkE,GACA,OAAAA,GACAA,EAAAlE,MACA,CAEA,IADA,IAAAoE,EAAA,GACAlI,EAAAiI,EAA6BjI,EAAKA,IAAAmI,OAClCnI,EAAA8D,SAAAkE,EAAAI,yBAAAJ,EAAAI,wBAAApI,EAAAqI,gBACAhB,EAAAW,EAAA,2BAAyE7I,MAAAa,EAAAqI,aAAAC,cAAA,IACzEJ,EAAAK,QAAAvI,EAAA8D,QAGAoE,EAAAK,QAAAP,EAAAlE,OAEA,IACAA,EAKA,SAAA0E,GAGA,IAFA,IAAAC,EAAAD,EAAAE,MAAA,MACAC,EAAA,GACAzK,EAAA,EAAmBA,EAAAuK,EAAAzD,SAAkB9G,EAAA,CACrC,IAAA0K,EAAAH,EAAAvK,IAEA2K,EAAAD,MAQA,KADAE,EAPAF,GAQAhI,QAAA,iBACA,IAAAkI,EAAAlI,QAAA,eATAgI,GACAD,EAAA9C,KAAA+C,GAMA,IAAAE,EAHA,OAAAH,EAAAI,KAAA,MAfAC,CADAd,EAAAa,KAAA,KAAAjB,EAAA,OAEAT,EAAAW,EAAA,SAA+C7I,MAAA2E,EAAAwE,cAAA,KAsB/C,SAAAW,EAAAH,GAGA,IAAAI,EAAA,gCAAAC,KAAAL,GACA,GAAAI,EACA,OAAAA,EAAA,GAAAE,OAAAF,EAAA,KAIA,IAAAG,EAAA,4BAAAF,KAAAL,GACA,GAAAO,EACA,OAAAA,EAAA,GAAAD,OAAAC,EAAA,KAIA,IAAAC,EAAA,iBAAAH,KAAAL,GACA,OAAAQ,EACA,CAAAA,EAAA,GAAAF,OAAAE,EAAA,UADA,EAKA,SAAAT,EAAAC,GACA,IAAAS,EAAAN,EAAAH,GAEA,IAAAS,EACA,SAGA,IAAAC,EAAAD,EAAA,GACAE,EAAAF,EAAA,GAEA,OAAAC,IAAAxF,GACAC,GAAAwF,GACAA,GAAAC,EAKA,SAAAxF,IACA,GAAAN,EAIA,IACA,UAAAC,MACK,MAAAxD,GACL,IAAAoI,EAAApI,EAAAyD,MAAA4E,MAAA,MAEAa,EAAAN,EADA,EAAAR,EAAA,GAAA7H,QAAA,KAAA6H,EAAA,GAAAA,EAAA,IAEA,IAAAc,EACA,OAIA,OADAvF,EAAAuF,EAAA,GACAA,EAAA,IAuBA,SAAAI,EAAAxK,GAIA,OAAAA,aAAAyK,EACAzK,EAIA0K,EAAA1K,GAsrBA,SAAA8I,GACA,IAAA6B,EAAAC,IAQA,OAPAJ,EAAAxF,SAAA,WACA,IACA8D,EAAAlF,KAAA+G,EAAAE,QAAAF,EAAAG,OAAAH,EAAAI,QACS,MAAAC,GACTL,EAAAG,OAAAE,MAGAL,EAAA7B,QA9rBAmC,CAAAjL,GAEAkL,EAAAlL,IAGAwK,EAAAK,QAAAL,GAMAxF,WAKAwF,EAAAW,kBAAA,EAQA,IAAAC,EAAA,EAkBA,SAAAR,IAOA,IAAAS,EAAAC,EAAA,GAAAC,EAAA,GAEAZ,EAAA3C,EAAA4C,EAAAjK,WACAmI,EAAAd,EAAAyC,EAAA9J,WAmCA,GAjCAmI,EAAA0C,gBAAA,SAAAX,EAAAY,EAAAC,GACA,IAAAC,EAAA3E,EAAAF,WACAwE,GACAA,EAAA5E,KAAAiF,GACA,SAAAF,GAAAC,EAAA,IACAH,EAAA7E,KAAAgF,EAAA,KAGAlB,EAAAxF,SAAA,WACAqG,EAAAG,gBAAA3E,MAAAwE,EAAAM,MAMA7C,EAAA8C,QAAA,WACA,GAAAN,EACA,OAAAxC,EAEA,IAAA+C,EAAAC,EAAAT,GAIA,OAHAU,EAAAF,KACAR,EAAAQ,GAEAA,GAGA/C,EAAAkD,QAAA,WACA,OAAAX,EAGAA,EAAAW,UAFA,CAAoBC,MAAA,YAKpBzB,EAAAW,kBAAA1G,EACA,IACA,UAAAC,MACS,MAAAxD,GAOT4H,EAAAnE,MAAAzD,EAAAyD,MAAAuH,UAAAhL,EAAAyD,MAAAlD,QAAA,SACAqH,EAAAI,aAAAkC,IAQA,SAAAe,EAAAC,GACAf,EAAAe,EAEA5B,EAAAW,kBAAA1G,IAGAqE,EAAAE,OAAAoD,GAGAjF,EAAAmE,EAAA,SAAAvD,EAAAsE,GACA7B,EAAAxF,SAAA,WACAoH,EAAAZ,gBAAA3E,MAAAuF,EAAAC,WAES,GAGTd,EADAD,OAAA,EAuCA,OAnCAX,EAAA7B,UACA6B,EAAAE,QAAA,SAAA7K,GACAqL,GAIAc,EAAA3B,EAAAxK,KAGA2K,EAAAO,QAAA,SAAAlL,GACAqL,GAIAc,EAAAjB,EAAAlL,KAEA2K,EAAAG,OAAA,SAAAwB,GACAjB,GAIAc,EAAArB,EAAAwB,KAEA3B,EAAAI,OAAA,SAAAwB,GACAlB,GAIAlE,EAAAoE,EAAA,SAAAxD,EAAAyE,GACAhC,EAAAxF,SAAA,WACAwH,EAAAD,WAES,IAGT5B,EA6BA,SAAA7B,EAAA2D,GACA,sBAAAA,EACA,UAAAjF,UAAA,gCAEA,IAAAmD,EAAAC,IACA,IACA6B,EAAA9B,EAAAE,QAAAF,EAAAG,OAAAH,EAAAI,QACK,MAAAuB,GACL3B,EAAAG,OAAAwB,GAEA,OAAA3B,EAAA7B,QAqDA,SAAA4D,EAAAC,GACA,OAAA7D,EAAA,SAAA+B,EAAAC,GAMA,QAAA/L,EAAA,EAAA6N,EAAAD,EAAA9G,OAA8C9G,EAAA6N,EAAS7N,IACvDyL,EAAAmC,EAAA5N,IAAA6E,KAAAiH,EAAAC,KAqBA,SAAAL,EAAApC,EAAAwE,EAAAb,QACA,IAAAa,IACAA,EAAA,SAAApB,GACA,OAAAX,EAAA,IAAApG,MACA,uCAAA+G,WAIA,IAAAO,IACAA,EAAA,WACA,OAAoBC,MAAA,aAIpB,IAAAnD,EAAAd,EAAAyC,EAAA9J,WAqBA,GAnBAmI,EAAA0C,gBAAA,SAAAX,EAAAY,EAAAE,GACA,IAAAmB,EACA,IAEAA,EADAzE,EAAAoD,GACApD,EAAAoD,GAAA5E,MAAAiC,EAAA6C,GAEAkB,EAAA3N,KAAA4J,EAAA2C,EAAAE,GAES,MAAAX,GACT8B,EAAAhC,EAAAE,GAEAH,GACAA,EAAAiC,IAIAhE,EAAAkD,UAGA,CACA,IAAAe,EAAAf,IACA,aAAAe,EAAAd,QACAnD,EAAAkC,UAAA+B,EAAAT,QAGAxD,EAAA8C,QAAA,WACA,IAAAmB,EAAAf,IACA,kBAAAe,EAAAd,OACA,aAAAc,EAAAd,MACAnD,EAEAiE,EAAA/M,OAIA,OAAA8I,EAuHA,SAAAkE,EAAAhN,EAAAiN,EAAAC,EAAAC,GACA,OAAA3C,EAAAxK,GAAA4D,KAAAqJ,EAAAC,EAAAC,GA+BA,SAAArB,EAAA9L,GACA,GAAA+L,EAAA/L,GAAA,CACA,IAAA+M,EAAA/M,EAAAgM,UACA,iBAAAe,EAAAd,MACA,OAAAc,EAAA/M,MAGA,OAAAA,EAQA,SAAA+L,EAAAtL,GACA,OAAAA,aAAAgK,EAIA,SAAAC,EAAAjK,GACA,OAtpBA,SAAAT,GACA,OAAAA,IAAAP,OAAAO,GAqpBAoN,CAAA3M,IAAA,mBAAAA,EAAAmD,KA7dA,iBAAAS,QAAAgJ,KAAAhJ,EAAAgJ,IAAAC,UACA9C,EAAAW,kBAAA,IAaAX,EAAAI,SA+HAjK,UAAA4M,iBAAA,WACA,IAAA1F,EAAA7G,KACA,gBAAA6H,EAAA7I,GACA6I,EACAhB,EAAAiD,OAAAjC,GACS,EAAA/B,UAAAjB,OACTgC,EAAAgD,QAAA7D,EAAAF,UAAA,IAEAe,EAAAgD,QAAA7K,KAWAwK,EAAAC,QAAA3B,GACA0B,EAAA1B,WAcA4D,OACA5D,EAAA0E,MACA1E,EAAAgC,UACAhC,EAAA+B,QAAAL,GAKAiD,WAAA,SAAAhN,GAGA,OAAAA,GAGAgK,EAAA9J,UAAA8M,WAAA,WAGA,OAAAzM,MAYAwJ,EAAAZ,KAAA,SAAA8D,EAAAC,GACA,OAAAnD,EAAAkD,GAAA9D,KAAA+D,IAGAlD,EAAA9J,UAAAiJ,KAAA,SAAAgE,GACA,OAAApD,EAAA,CAAAxJ,KAAA4M,IAAAC,OAAA,SAAAH,EAAAC,GACA,GAAAD,IAAAC,EAEA,OAAAD,EAEA,UAAAhJ,MAAA,+BAAAgJ,EAAA,IAAAC,MAUAnD,EAAAkC,OAcAjC,EAAA9J,UAAA+L,KAAA,WACA,OAAA1L,KAAA4C,KAAA4G,EAAAkC,QAcAlC,EAAAsD,YAAArD,GAuDA9J,UAAAsF,SAAA,WACA,0BAGAwE,EAAA9J,UAAAiD,KAAA,SAAAqJ,EAAAC,EAAAC,GACA,IAAAtF,EAAA7G,KACA2J,EAAAC,IACAmD,GAAA,EAiEA,OAtCAvD,EAAAxF,SAAA,WACA6C,EAAA2D,gBAAA,SAAAxL,GACA+N,IAGAA,GAAA,EAEApD,EAAAE,QA/BA,SAAA7K,GACA,IACA,yBAAAiN,IAAAjN,KACS,MAAAgL,GACT,OAAAF,EAAAE,IA2BAgD,CAAAhO,MACS,iBAAAgL,GACT+C,IAGAA,GAAA,EAEApD,EAAAE,QA9BA,SAAAG,GACA,sBAAAkC,EAAA,CACAtE,EAAAoC,EAAAnD,GACA,IACA,OAAAqF,EAAAlC,GACa,MAAAiD,GACb,OAAAnD,EAAAmD,IAGA,OAAAnD,EAAAE,GAqBAkD,CAAAlD,UAKAnD,EAAA2D,qBAAA,0BAAAxL,GACA,IAAAmO,EACAC,GAAA,EACA,IACAD,EA3BA,SAAAnO,GACA,yBAAAmN,IAAAnN,KA0BAqO,CAAArO,GACS,MAAAkB,GAET,GADAkN,GAAA,GACA5D,EAAA8D,QAGA,MAAApN,EAFAsJ,EAAA8D,QAAApN,GAMAkN,GACAzD,EAAAI,OAAAoD,MAIAxD,EAAA7B,SAGA0B,EAAA+D,IAAA,SAAAzF,EAAAzB,GACA,OAAAmD,EAAA1B,GAAAyF,IAAAlH,IAeAoD,EAAA9J,UAAA4N,IAAA,SAAAlH,GAGA,OAFAA,EAAAmD,EAAAnD,GAEArG,KAAA4C,KAAA,SAAA5D,GACA,OAAAqH,EAAAmH,MAAAxO,GAAAyO,YAAAzO,MAoBAwK,EAAAwC,OAKAvC,EAAA9J,UAAA8N,YAAA,SAAAzO,GACA,OAAAgB,KAAA4C,KAAA,WAAkC,OAAA5D,KAGlCwK,EAAAiE,YAAA,SAAA3F,EAAA9I,GACA,OAAAwK,EAAA1B,GAAA2F,YAAAzO,IAGAyK,EAAA9J,UAAA+N,WAAA,SAAApC,GACA,OAAAtL,KAAA4C,KAAA,WAAkC,MAAA0I,KAGlC9B,EAAAkE,WAAA,SAAA5F,EAAAwD,GACA,OAAA9B,EAAA1B,GAAA4F,WAAApC,IAcA9B,EAAAsB,SAeAtB,EAAAuB,YAKAvB,EAAAE,iBASAF,EAAAmE,UACA,SAAAlO,GACA,OAAAsL,EAAAtL,IAAA,YAAAA,EAAAuL,UAAAC,OAGAxB,EAAA9J,UAAAgO,UAAA,WACA,kBAAA3N,KAAAgL,UAAAC,OAOAzB,EAAAoE,YACA,SAAAnO,GACA,OAAAsL,EAAAtL,IAAA,cAAAA,EAAAuL,UAAAC,OAGAxB,EAAA9J,UAAAiO,YAAA,WACA,oBAAA5N,KAAAgL,UAAAC,OAMAzB,EAAAqE,WACA,SAAApO,GACA,OAAAsL,EAAAtL,IAAA,aAAAA,EAAAuL,UAAAC,OAGAxB,EAAA9J,UAAAkO,WAAA,WACA,mBAAA7N,KAAAgL,UAAAC,OASA,IApkBA5E,EAAA/H,EAAAwP,EAokBAC,EAAA,GACAC,EAAA,GACAC,EAAA,GACAC,GAAA,EAEA,SAAAC,IACAJ,EAAAlJ,OAAA,EACAmJ,EAAAnJ,OAAA,EAEAqJ,IACAA,GAAA,GAmEA,SAAApE,EAAAwB,GACA,IAAA8C,EAAA3E,EAAA,CACAuC,KAAA,SAAAE,GAKA,OAHAA,GA9CA,SAAApE,GACA,GAAAoG,EAAA,CAIA,IAAAG,EAAA5H,EAAAuH,EAAAlG,IACA,IAAAuG,IACA,iBAAAhL,GAAA,mBAAAA,EAAAiL,MACA9E,EAAAxF,SAAAyB,SAAA,WACA,IAAA8I,EAAA9H,EAAAwH,EAAAnG,IACA,IAAAyG,IACAlL,EAAAiL,KAAA,mBAAAP,EAAAM,GAAAvG,GACAmG,EAAAO,OAAAD,EAAA,MAIAP,EAAAQ,OAAAH,EAAA,GACAN,EAAAS,OAAAH,EAAA,KA8BAI,CAAAzO,MAEAkM,IAAAZ,GAAAtL,OAEK,WACL,OAAAA,MACK,WACL,OAAgBiL,MAAA,WAAAK,YAMhB,OAjFA,SAAAxD,EAAAwD,GACA4C,IAGA,iBAAA7K,GAAA,mBAAAA,EAAAiL,MACA9E,EAAAxF,SAAAyB,SAAA,YACA,IAAAgB,EAAAuH,EAAAlG,KACAzE,EAAAiL,KAAA,qBAAAhD,EAAAxD,GACAmG,EAAAvI,KAAAoC,MAKAkG,EAAAtI,KAAAoC,GACAwD,QAAA,IAAAA,EAAA3H,MACAoK,EAAArI,KAAA4F,EAAA3H,OAEAoK,EAAArI,KAAA,cAAA4F,IA8DAoD,CAAAN,EAAA9C,GAEA8C,EAQA,SAAAlE,EAAAlL,GACA,OAAAyK,EAAA,CACAuC,KAAA,WACA,OAAAhN,GAEAJ,IAAA,SAAAN,GACA,OAAAU,EAAAV,IAEAqQ,IAAA,SAAArQ,EAAAsQ,GACA5P,EAAAV,GAAAsQ,GAEAC,OAAA,SAAAvQ,UACAU,EAAAV,IAEAwQ,KAAA,SAAAxQ,EAAAqM,GAGA,OAAArM,QACAU,EAAA6G,WAAA,EAAA8E,GAEA3L,EAAAV,GAAAuH,MAAA7G,EAAA2L,IAGA9E,MAAA,SAAAe,EAAA+D,GACA,OAAA3L,EAAA6G,MAAAe,EAAA+D,IAEAnD,KAAA,WACA,OAAAD,EAAAvI,UAEK,aACL,OAAgBiM,MAAA,YAAAjM,WAoDhB,SAAA6N,EAAA7N,EAAAiN,EAAAC,GACA,OAAA1C,EAAAxK,GAAA6N,OAAAZ,EAAAC,GA+JA,SAAA6C,EAAAtP,EAAAgL,EAAAE,GACA,OAAAnB,EAAA/J,GAAAsP,SAAAtE,EAAAE,GAiLA,SAAA6B,EAAAwC,GACA,OAAAhD,EAAAgD,EAAA,SAAAA,GACA,IAAAC,EAAA,EACAtF,EAAAC,IA4BA,OA3BAzD,EAAA6I,EAAA,SAAAjI,EAAAe,EAAAvB,GACA,IAAA2I,EAEAnE,EAAAjD,IACA,eAAAoH,EAAApH,EAAAkD,WAAAC,MAEA+D,EAAAzI,GAAA2I,EAAAlQ,SAEAiQ,EACAjD,EACAlE,EACA,SAAA9I,GACAgQ,EAAAzI,GAAAvH,EACA,KAAAiQ,GACAtF,EAAAE,QAAAmF,IAGArF,EAAAG,OACA,SAAAyB,GACA5B,EAAAI,OAAA,CAAyCxD,QAAAvH,MAAAuM,aAIhC,GACT,IAAA0D,GACAtF,EAAAE,QAAAmF,GAEArF,EAAA7B,UAiBA,SAAAqH,EAAAH,GACA,OAAAA,EAAAnK,OACA,OAAA2E,EAAAK,UAGA,IAAAF,EAAAH,EAAAI,QACAqF,EAAA,EA6BA,OA5BA9I,EAAA6I,EAAA,SAAAI,EAAAC,EAAA9I,GACA,IAAAuB,EAAAkH,EAAAzI,GAEA0I,IAEAjD,EAAAlE,EACA,SAAAgE,GACAnC,EAAAE,QAAAiC,IAEA,SAAAwD,GAEA,SADAL,EACA,CACA,IAAAb,EAAAkB,GAAA,IAAA5L,MAAA,GAAA4L,GAEAlB,EAAA/C,QAAA,mGACA+C,EAAA/C,QAEA1B,EAAAG,OAAAsE,KAGA,SAAA7C,GACA5B,EAAAI,OAAA,CACAxD,QACAvH,MAAAuM,YAGKxE,GAEL4C,EAAA7B,QAiBA,SAAAyH,EAAAP,GACA,OAAAhD,EAAAgD,EAAA,SAAAA,GAEA,OADAA,EAAAtI,EAAAsI,EAAAxF,GACAwC,EAAAQ,EAAA9F,EAAAsI,EAAA,SAAAlH,GACA,OAAAkE,EAAAlE,EAAAlE,QACS,WACT,OAAAoL,MA7jBAxF,EAAA2E,2BAEA3E,EAAAgG,oBAAA,WAEA,OAAAzB,EAAA7H,SAGAsD,EAAAiG,+BAAA,WACAtB,IACAD,GAAA,GAGAC,IAQA3E,EAAAM,SA0BAN,EAAAU,UA6DAV,EAAAkG,OACA,SAAAjQ,GACA,OAAAgK,EAAA,CACAkG,MAAA,cACK,SAAAlF,EAAAE,GACL,OAAAoE,EAAAtP,EAAAgL,EAAAE,IACK,WACL,OAAAnB,EAAA/J,GAAAuL,aAcAxB,EAAAqD,SAKApD,EAAA9J,UAAAkN,OAAA,SAAAZ,EAAAC,GACA,OAAAlM,KAAAwM,MAAA5J,KAAA,SAAAgN,GACA,OAAA3D,EAAApG,WAAA,EAAA+J,IACK1D,IA6BL1C,EAAAqG,MACA,SAAAC,GACA,kBAGA,SAAAC,EAAAC,EAAAC,GACA,IAAAnE,EAUA,uBAAAoE,cAAA,CAEA,IACApE,EAAAqE,EAAAH,GAAAC,GACiB,MAAAjG,GACjB,OAAAF,EAAAE,GAEA,OAAA8B,EAAAiB,KACAvD,EAAAsC,EAAA9M,OAEAgN,EAAAF,EAAA9M,MAAAqH,EAAA+J,GAKA,IACAtE,EAAAqE,EAAAH,GAAAC,GACiB,MAAAjG,GACjB,OA77BA,SAAAA,GACA,MACA,2BAAAvC,EAAAuC,IACAA,aAAAjE,EA07BAsK,CAAArG,GACAR,EAAAQ,EAAAhL,OAEA8K,EAAAE,GAGA,OAAAgC,EAAAF,EAAAzF,EAAA+J,GAGA,IAAAD,EAAAL,EAAAjK,MAAA7F,KAAA8F,WACAO,EAAA0J,EAAAxQ,KAAAwQ,EAAA,QACAK,EAAAL,EAAAxQ,KAAAwQ,EAAA,SACA,OAAA1J,MAWAmD,EAAA8G,MACA,SAAAR,GACAtG,EAAAuD,KAAAvD,EAAAqG,MAAAC,EAAAtG,KA4BAA,EAAA,OACA,SAAAxK,GACA,UAAA+G,EAAA/G,IAkBAwK,EAAA+G,SACA,SAAAlK,GACA,kBACA,OAAAwG,EAAA,CAAA7M,KAAAwM,EAAA1G,YAAA,SAAAe,EAAA8D,GACA,OAAAtE,EAAAR,MAAAgB,EAAA8D,OAYAnB,EAAAuF,WAKAtF,EAAA9J,UAAAoP,SAAA,SAAAtE,EAAAE,GACA,IAAA9D,EAAA7G,KACA2J,EAAAC,IAIA,OAHAJ,EAAAxF,SAAA,WACA6C,EAAA2D,gBAAAb,EAAAE,QAAAY,EAAAE,KAEAhB,EAAA7B,SASA0B,EAAA5K,IAAA,SAAAa,EAAAH,GACA,OAAAkK,EAAA/J,GAAAsP,SAAA,OAAAzP,KAGAmK,EAAA9J,UAAAf,IAAA,SAAAU,GACA,OAAAU,KAAA+O,SAAA,OAAAzP,KAUAkK,EAAAmF,IAAA,SAAAlP,EAAAH,EAAAN,GACA,OAAAwK,EAAA/J,GAAAsP,SAAA,OAAAzP,EAAAN,KAGAyK,EAAA9J,UAAAgP,IAAA,SAAArP,EAAAN,GACA,OAAAgB,KAAA+O,SAAA,OAAAzP,EAAAN,KASAwK,EAAAgH,IACAhH,EAAA,gBAAA/J,EAAAH,GACA,OAAAkK,EAAA/J,GAAAsP,SAAA,UAAAzP,KAGAmK,EAAA9J,UAAA6Q,IACA/G,EAAA9J,UAAA,gBAAAL,GACA,OAAAU,KAAA+O,SAAA,UAAAzP,KAgBAkK,EAAAiH,OACAjH,EAAAsF,KAAA,SAAArP,EAAAnB,EAAAqM,GACA,OAAAnB,EAAA/J,GAAAsP,SAAA,QAAAzQ,EAAAqM,KAGAlB,EAAA9J,UAAA8Q,OACAhH,EAAA9J,UAAAmP,KAAA,SAAAxQ,EAAAqM,GACA,OAAA3K,KAAA+O,SAAA,QAAAzQ,EAAAqM,KAUAnB,EAAAkH,KACAlH,EAAAmH,MACAnH,EAAAoH,OAAA,SAAAnR,EAAAnB,GACA,OAAAkL,EAAA/J,GAAAsP,SAAA,QAAAzQ,EAAA0H,EAAAF,UAAA,MAGA2D,EAAA9J,UAAA+Q,KACAjH,EAAA9J,UAAAgR,MACAlH,EAAA9J,UAAAiR,OAAA,SAAAtS,GACA,OAAA0B,KAAA+O,SAAA,QAAAzQ,EAAA0H,EAAAF,UAAA,MAQA0D,EAAAqH,OAAA,SAAApR,EAAAkL,GACA,OAAAnB,EAAA/J,GAAAsP,SAAA,gBAAApE,KAGAlB,EAAA9J,UAAAkR,OAAA,SAAAlG,GACA,OAAA3K,KAAA+O,SAAA,gBAAApE,KAQAnB,EAAA,IACAA,EAAAgE,MAAA,SAAA/N,GACA,OAAA+J,EAAA/J,GAAAsP,SAAA,gBAAA/I,EAAAF,UAAA,MAGA2D,EAAA9J,UAAA6N,MAAA,WACA,OAAAxN,KAAA+O,SAAA,gBAAA/I,EAAAF,cASA0D,EAAAsH,MAAA,SAAArR,GACA,IAAAqI,EAAA0B,EAAA/J,GACAkL,EAAA3E,EAAAF,UAAA,GACA,kBACA,OAAAgC,EAAAiH,SAAA,SACA/O,KACA2K,EAAAvI,OAAA4D,EAAAF,gBAIA2D,EAAA9J,UAAAmR,MAAA,WACA,IAAAhJ,EAAA9H,KACA2K,EAAA3E,EAAAF,WACA,kBACA,OAAAgC,EAAAiH,SAAA,SACA/O,KACA2K,EAAAvI,OAAA4D,EAAAF,gBAWA0D,EAAAhC,KAAA,SAAA/H,GACA,OAAA+J,EAAA/J,GAAAsP,SAAA,YAGAtF,EAAA9J,UAAA6H,KAAA,WACA,OAAAxH,KAAA+O,SAAA,YAYAvF,EAAAgD,MAoCA/C,EAAA9J,UAAA6M,IAAA,WACA,OAAAA,EAAAxM,OAUAwJ,EAAA2F,MAwCA1F,EAAA9J,UAAAwP,IAAA,WACA,OAAAA,EAAAnP,OAYAwJ,EAAA+F,aAlrCAlJ,EAkrCAkJ,EAlrCAjR,EAkrCA,cAlrCAwP,EAkrCA,aAjrCA,WAMA,MALA,oBAAA9L,SACA,mBAAAA,QAAA+O,MACA/O,QAAA+O,KAAAzS,EAAA,uBAAAwP,EACA,gBAAApK,MAAA,IAAAC,OAEA0C,EAAAR,MAAAQ,EAAAP,aAurCA2D,EAAA9J,UAAA4P,YAAA,WACA,OAAAA,EAAAvP,OAMAwJ,EAAAwH,WACA,SAAAhC,GACA,OAAAxF,EAAAwF,GAAAgC,cAUAvH,EAAA9J,UAAAqR,WAAA,WACA,OAAAhR,KAAA4C,KAAA,SAAAoM,GACA,OAAAxC,EAAA9F,EAAAsI,EAAA,SAAAlH,GAEA,SAAAmJ,IACA,OAAAnJ,EAAAkD,UAEA,OAJAlD,EAAA0B,EAAA1B,IAIAlF,KAAAqO,WAcAzH,EAAA0H,KACA1H,EAAA,eAAA/J,EAAAyM,GACA,OAAA1C,EAAA/J,GAAAmD,UAAA,EAAAsJ,IAGAzC,EAAA9J,UAAAuR,KACAzH,EAAA9J,UAAA,eAAAuM,GACA,OAAAlM,KAAA4C,UAAA,EAAAsJ,IAWA1C,EAAA+B,SACA,SAAA9L,EAAA0M,GACA,OAAA3C,EAAA/J,GAAAmD,UAAA,SAAAuJ,IAGA1C,EAAA9J,UAAA4L,SAAA,SAAAY,GACA,OAAAnM,KAAA4C,UAAA,SAAAuJ,IAcA3C,EAAA2H,IACA3H,EAAA,iBAAA/J,EAAA4G,GACA,OAAAmD,EAAA/J,GAAA,QAAA4G,IAGAoD,EAAA9J,UAAAwR,IACA1H,EAAA9J,UAAA,iBAAA0G,GACA,IAAAA,GAAA,mBAAAA,EAAAR,MACA,UAAAnC,MAAA,kCAGA,OADA2C,EAAAmD,EAAAnD,GACArG,KAAA4C,KAAA,SAAA5D,GACA,OAAAqH,EAAAmH,QAAA5K,KAAA,WACA,OAAA5D,KAEK,SAAAsM,GAEL,OAAAjF,EAAAmH,QAAA5K,KAAA,WACA,MAAA0I,OAWA9B,EAAAuD,KAAA,SAAAtN,EAAAwM,EAAAC,EAAAX,GACA,OAAA/B,EAAA/J,GAAAsN,KAAAd,EAAAC,EAAAX,IAGA9B,EAAA9J,UAAAoN,KAAA,SAAAd,EAAAC,EAAAX,GACA,IAAA6F,EAAA,SAAAvJ,GAGA2B,EAAAxF,SAAA,WAEA,GADA4D,EAAAC,EAAAC,IACA0B,EAAA8D,QAGA,MAAAzF,EAFA2B,EAAA8D,QAAAzF,MAQAC,EAAAmE,GAAAC,GAAAX,EACAvL,KAAA4C,KAAAqJ,EAAAC,EAAAX,GACAvL,KAEA,iBAAAqD,QAAAqB,SACA0M,EAAA/N,EAAAqB,OAAAnF,KAAA6R,IAGAtJ,EAAAlF,UAAA,EAAAwO,IAYA5H,EAAA6H,QAAA,SAAA5R,EAAA6R,EAAAzJ,GACA,OAAA2B,EAAA/J,GAAA4R,QAAAC,EAAAzJ,IAGA4B,EAAA9J,UAAA0R,QAAA,SAAAC,EAAAzJ,GACA,IAAA8B,EAAAC,IACA2H,EAAAvM,WAAA,WACA6C,GAAA,iBAAAA,KACAA,EAAA,IAAAnE,MAAAmE,GAAA,mBAAAyJ,EAAA,QACAE,KAAA,aAEA7H,EAAAG,OAAAjC,IACKyJ,GAUL,OARAtR,KAAA4C,KAAA,SAAA5D,GACAyS,aAAAF,GACA5H,EAAAE,QAAA7K,IACK,SAAAgL,GACLyH,aAAAF,GACA5H,EAAAG,OAAAE,IACKL,EAAAI,QAELJ,EAAA7B,SAYA0B,EAAAkI,MAAA,SAAAjS,EAAA4R,GAKA,YAJA,IAAAA,IACAA,EAAA5R,EACAA,OAAA,GAEA+J,EAAA/J,GAAAiS,MAAAL,IAGA5H,EAAA9J,UAAA+R,MAAA,SAAAL,GACA,OAAArR,KAAA4C,KAAA,SAAA5D,GACA,IAAA2K,EAAAC,IAIA,OAHA5E,WAAA,WACA2E,EAAAE,QAAA7K,IACSqS,GACT1H,EAAA7B,WAaA0B,EAAAmI,QAAA,SAAAtL,EAAAsE,GACA,OAAAnB,EAAAnD,GAAAsL,QAAAhH,IAGAlB,EAAA9J,UAAAgS,QAAA,SAAAhH,GACA,IAAAhB,EAAAC,IACAgI,EAAA5L,EAAA2E,GAGA,OAFAiH,EAAAlM,KAAAiE,EAAA4C,oBACAvM,KAAA6Q,OAAAe,GAAAV,KAAAvH,EAAAG,QACAH,EAAA7B,SAYA0B,EAAAqI,OAAA,SAAAxL,GACA,IAAAsE,EAAA3E,EAAAF,UAAA,GACA,OAAA0D,EAAAnD,GAAAsL,QAAAhH,IAGAlB,EAAA9J,UAAAkS,OAAA,WACA,IAAAD,EAAA5L,EAAAF,WACA6D,EAAAC,IAGA,OAFAgI,EAAAlM,KAAAiE,EAAA4C,oBACAvM,KAAA6Q,OAAAe,GAAAV,KAAAvH,EAAAG,QACAH,EAAA7B,SAWA0B,EAAAsI,OACAtI,EAAAuI,UAAA,SAAA1L,GACA,QAAAU,IAAAV,EACA,UAAA3C,MAAA,sCAEA,IAAAsO,EAAAhM,EAAAF,UAAA,GACA,kBACA,IAAA8L,EAAAI,EAAA5P,OAAA4D,EAAAF,YACA6D,EAAAC,IAGA,OAFAgI,EAAAlM,KAAAiE,EAAA4C,oBACA/C,EAAAnD,GAAAwK,OAAAe,GAAAV,KAAAvH,EAAAG,QACAH,EAAA7B,UAIA2B,EAAA9J,UAAAmS,OACArI,EAAA9J,UAAAoS,UAAA,WACA,IAAApH,EAAA3E,EAAAF,WAEA,OADA6E,EAAAvC,QAAApI,MACAwJ,EAAAuI,UAAAlM,WAAA,EAAA8E,IAGAnB,EAAAyI,MAAA,SAAA5L,EAAAO,GACA,IAAAoL,EAAAhM,EAAAF,UAAA,GACA,kBACA,IAAA8L,EAAAI,EAAA5P,OAAA4D,EAAAF,YACA6D,EAAAC,IAMA,OALAgI,EAAAlM,KAAAiE,EAAA4C,oBAIA/C,EAHA,WACA,OAAAnD,EAAAR,MAAAe,EAAAd,aAEA+K,OAAAe,GAAAV,KAAAvH,EAAAG,QACAH,EAAA7B,UAIA2B,EAAA9J,UAAAsS,MAAA,WACA,IAAAtH,EAAA3E,EAAAF,UAAA,GAEA,OADA6E,EAAAvC,QAAApI,MACAwJ,EAAAyI,MAAApM,WAAA,EAAA8E,IAYAnB,EAAA0I,QACA1I,EAAA2I,MAAA,SAAA1S,EAAAnB,EAAAqM,GACA,OAAAnB,EAAA/J,GAAA0S,MAAA7T,EAAAqM,IAGAlB,EAAA9J,UAAAuS,QACAzI,EAAA9J,UAAAwS,MAAA,SAAA7T,EAAAqM,GACA,IAAAiH,EAAA5L,EAAA2E,GAAA,IACAhB,EAAAC,IAGA,OAFAgI,EAAAlM,KAAAiE,EAAA4C,oBACAvM,KAAA+O,SAAA,QAAAzQ,EAAAsT,IAAAV,KAAAvH,EAAAG,QACAH,EAAA7B,SAaA0B,EAAA4I,MACA5I,EAAA6I,OACA7I,EAAA8I,QAAA,SAAA7S,EAAAnB,GACA,IAAAsT,EAAA5L,EAAAF,UAAA,GACA6D,EAAAC,IAGA,OAFAgI,EAAAlM,KAAAiE,EAAA4C,oBACA/C,EAAA/J,GAAAsP,SAAA,QAAAzQ,EAAAsT,IAAAV,KAAAvH,EAAAG,QACAH,EAAA7B,SAGA2B,EAAA9J,UAAAyS,MACA3I,EAAA9J,UAAA0S,OACA5I,EAAA9J,UAAA2S,QAAA,SAAAhU,GACA,IAAAsT,EAAA5L,EAAAF,UAAA,GACA6D,EAAAC,IAGA,OAFAgI,EAAAlM,KAAAiE,EAAA4C,oBACAvM,KAAA+O,SAAA,QAAAzQ,EAAAsT,IAAAV,KAAAvH,EAAAG,QACAH,EAAA7B,SAaA0B,EAAA+I,QACA,SAAA9S,EAAA+S,GACA,OAAAhJ,EAAA/J,GAAA8S,QAAAC,IAGA/I,EAAA9J,UAAA4S,QAAA,SAAAC,GACA,IAAAA,EAWA,OAAAxS,KAVAA,KAAA4C,KAAA,SAAA5D,GACAwK,EAAAxF,SAAA,WACAwO,EAAA,KAAAxT,MAES,SAAA6I,GACT2B,EAAAxF,SAAA,WACAwO,EAAA3K,QAQA2B,EAAAiJ,WAAA,WACA,UAAA/O,MAAA,uDAIA,IAAA6F,EAAAxF,IAEA,OAAAyF,8DCzhEA,SAAAkJ,GAAA,IAAAC,OAAA,IAAAD,MACA,oBAAA7L,YACA1G,OACA0F,EAAA5F,SAAAN,UAAAkG,MAiBA,SAAA+M,EAAAC,EAAAC,GACA9S,KAAA+S,IAAAF,EACA7S,KAAAgT,SAAAF,EAfAjV,EAAAmH,WAAA,WACA,WAAA4N,EAAA/M,EAAA3H,KAAA8G,WAAA2N,EAAA7M,WAAA2L,eAEA5T,EAAAoV,YAAA,WACA,WAAAL,EAAA/M,EAAA3H,KAAA+U,YAAAN,EAAA7M,WAAAoN,gBAEArV,EAAA4T,aACA5T,EAAAqV,cAAA,SAAA7B,GACAA,GACAA,EAAA8B,SAQAP,EAAAjT,UAAAyT,MAAAR,EAAAjT,UAAA0T,IAAA,aACAT,EAAAjT,UAAAwT,MAAA,WACAnT,KAAAgT,SAAA9U,KAAAyU,EAAA3S,KAAA+S,MAIAlV,EAAAyV,OAAA,SAAAC,EAAAC,GACA/B,aAAA8B,EAAAE,gBACAF,EAAAG,aAAAF,GAGA3V,EAAA8V,SAAA,SAAAJ,GACA9B,aAAA8B,EAAAE,gBACAF,EAAAG,cAAA,GAGA7V,EAAA+V,aAAA/V,EAAAgW,OAAA,SAAAN,GACA9B,aAAA8B,EAAAE,gBAEA,IAAAD,EAAAD,EAAAG,aACA,GAAAF,IACAD,EAAAE,eAAAzO,WAAA,WACAuO,EAAAO,YACAP,EAAAO,cACKN,KAKL7V,EAAQ,IAIRE,EAAAyF,aAAA,oBAAAuD,WAAAvD,mBACA,IAAAoP,KAAApP,cACAtD,WAAAsD,aACAzF,EAAAkW,eAAA,oBAAAlN,WAAAkN,qBACA,IAAArB,KAAAqB,gBACA/T,WAAA+T,sDC9DA,SAAArB,EAAArP,IAAA,SAAAqP,EAAA3L,GACA,aAEA,IAAA2L,EAAApP,aAAA,CAIA,IAIA0Q,EA6HAC,EAZA9O,EArBA+O,EAhGAC,EAAA,EACAC,EAAA,GACAC,GAAA,EACAC,EAAA5B,EAAA/R,SAoJA4T,EAAA9V,OAAA+V,gBAAA/V,OAAA+V,eAAA9B,GACA6B,OAAAvP,WAAAuP,EAAA7B,EAjFAsB,EAoFU,qBAAV,GAAU/O,SAAA/G,KAAAwU,EAAArP,SApFV,SAAAoR,GACApR,EAAAW,SAAA,WAA0C0Q,EAAAD,MAI1C,WAGA,GAAA/B,EAAAlN,cAAAkN,EAAAiC,cAAA,CACA,IAAAC,GAAA,EACAC,EAAAnC,EAAArN,UAMA,OALAqN,EAAArN,UAAA,WACAuP,GAAA,GAEAlC,EAAAlN,YAAA,QACAkN,EAAArN,UAAAwP,EACAD,GAwEKE,IA/DLZ,EAAA,gBAAAa,KAAAC,SAAA,IASAtC,EAAA7Q,iBACA6Q,EAAA7Q,iBAAA,UAAAoT,GAAA,GAEAvC,EAAAwC,YAAA,YAAAD,GAGA,SAAAR,GACA/B,EAAAlN,YAAA0O,EAAAO,EAAA,OAmDK/B,EAAAxN,iBA9CLC,EAAA,IAAAD,gBACAE,MAAAC,UAAA,SAAA1D,GAEA+S,EADA/S,EAAAoB,OAIA,SAAA0R,GACAtP,EAAAI,MAAAC,YAAAiP,KA2CKH,GAAA,uBAAAA,EAAAa,cAAA,WAtCLlB,EAAAK,EAAAc,gBACA,SAAAX,GAGA,IAAAY,EAAAf,EAAAa,cAAA,UACAE,EAAAC,mBAAA,WACAZ,EAAAD,GACAY,EAAAC,mBAAA,KACArB,EAAAsB,YAAAF,GACAA,EAAA,MAEApB,EAAAuB,YAAAH,KAKA,SAAAZ,GACAzP,WAAA0P,EAAA,EAAAD,IA8BAF,EAAAjR,aA1KA,SAAA+C,GAEA,mBAAAA,IACAA,EAAA,IAAApG,SAAA,GAAAoG,IAIA,IADA,IAAAsE,EAAA,IAAA1E,MAAAH,UAAAjB,OAAA,GACA9G,EAAA,EAAqBA,EAAA4M,EAAA9F,OAAiB9G,IACtC4M,EAAA5M,GAAA+H,UAAA/H,EAAA,GAGA,IAAAmG,EAAA,CAAkBmC,WAAAsE,QAGlB,OAFAyJ,EAAAD,GAAAjQ,EACA8P,EAAAG,GACAA,KA6JAI,EAAAR,iBA1JA,SAAAA,EAAAU,UACAL,EAAAK,GAyBA,SAAAC,EAAAD,GAGA,GAAAJ,EAGArP,WAAA0P,EAAA,EAAAD,OACS,CACT,IAAAvQ,EAAAkQ,EAAAK,GACA,GAAAvQ,EAAA,CACAmQ,GAAA,EACA,KAjCA,SAAAnQ,GACA,IAAAmC,EAAAnC,EAAAmC,SACAsE,EAAAzG,EAAAyG,KACA,OAAAA,EAAA9F,QACA,OACAwB,IACA,MACA,OACAA,EAAAsE,EAAA,IACA,MACA,OACAtE,EAAAsE,EAAA,GAAAA,EAAA,IACA,MACA,OACAtE,EAAAsE,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACA,MACA,QACAtE,EAAAR,MAAAkB,EAAA4D,IAiBA8K,CAAAvR,GACiB,QACjB6P,EAAAU,GACAJ,GAAA,KAiCA,SAAAY,EAAAtT,GACAA,EAAAqG,SAAA0K,GACA,iBAAA/Q,EAAAoB,MACA,IAAApB,EAAAoB,KAAAtC,QAAAyT,IACAQ,GAAA/S,EAAAoB,KAAAmD,MAAAgO,EAAArP,UA5GA,CAyLC,oBAAAgC,UAAA,IAAA6L,EAAA1S,KAAA0S,EAAA7L,8DCzLDlJ,EAAAkB,EAAA6W,GAAA/X,EAAA,GAAAA,EAAA,IAAAA,EAAA,0CCCA,IAOAgY,EACAC,EARAvS,EAAAvF,EAAAD,QAAA,GAUA,SAAAgY,IACA,UAAAnS,MAAA,mCAEA,SAAAoS,IACA,UAAApS,MAAA,qCAsBA,SAAAqS,EAAAC,GACA,GAAAL,IAAA3Q,WAEA,OAAAA,WAAAgR,EAAA,GAGA,IAAAL,IAAAE,IAAAF,IAAA3Q,WAEA,OADA2Q,EAAA3Q,WACAA,WAAAgR,EAAA,GAEA,IAEA,OAAAL,EAAAK,EAAA,GACK,MAAA9V,GACL,IAEA,OAAAyV,EAAAzX,KAAA,KAAA8X,EAAA,GACS,MAAA9V,GAET,OAAAyV,EAAAzX,KAAA8B,KAAAgW,EAAA,MAvCA,WACA,IAEAL,EADA,mBAAA3Q,WACAA,WAEA6Q,EAEK,MAAA3V,GACLyV,EAAAE,EAEA,IAEAD,EADA,mBAAAnE,aACAA,aAEAqE,EAEK,MAAA5V,GACL0V,EAAAE,GAjBA,GAwEA,IAEAG,EAFAC,EAAA,GACAC,GAAA,EAEAC,GAAA,EAEA,SAAAC,IACAF,GAAAF,IAGAE,GAAA,EACAF,EAAApR,OACAqR,EAAAD,EAAA7T,OAAA8T,GAEAE,GAAA,EAEAF,EAAArR,QACAyR,KAIA,SAAAA,IACA,IAAAH,EAAA,CAGA,IAAA9E,EAAA0E,EAAAM,GACAF,GAAA,EAGA,IADA,IAAAvK,EAAAsK,EAAArR,OACA+G,GAAA,CAGA,IAFAqK,EAAAC,EACAA,EAAA,KACAE,EAAAxK,GACAqK,GACAA,EAAAG,GAAAX,MAGAW,GAAA,EACAxK,EAAAsK,EAAArR,OAEAoR,EAAA,KACAE,GAAA,EAnEA,SAAAI,GACA,GAAAX,IAAAnE,aAEA,OAAAA,aAAA8E,GAGA,IAAAX,IAAAE,IAAAF,IAAAnE,aAEA,OADAmE,EAAAnE,aACAA,aAAA8E,GAEA,IAEAX,EAAAW,GACK,MAAArW,GACL,IAEA,OAAA0V,EAAA1X,KAAA,KAAAqY,GACS,MAAArW,GAGT,OAAA0V,EAAA1X,KAAA8B,KAAAuW,KAgDAC,CAAAnF,IAiBA,SAAAoF,EAAAT,EAAApG,GACA5P,KAAAgW,MACAhW,KAAA4P,QAYA,SAAAhM,KA5BAP,EAAAW,SAAA,SAAAgS,GACA,IAAArL,EAAA,IAAA1E,MAAAH,UAAAjB,OAAA,GACA,KAAAiB,UAAAjB,OACA,QAAA9G,EAAA,EAAuBA,EAAA+H,UAAAjB,OAAsB9G,IAC7C4M,EAAA5M,EAAA,GAAA+H,UAAA/H,GAGAmY,EAAAxQ,KAAA,IAAA+Q,EAAAT,EAAArL,IACA,IAAAuL,EAAArR,QAAAsR,GACAJ,EAAAO,IASAG,EAAA9W,UAAA8V,IAAA,WACAzV,KAAAgW,IAAAnQ,MAAA,KAAA7F,KAAA4P,QAEAvM,EAAAqT,MAAA,UACArT,EAAAsT,SAAA,EACAtT,EAAAgJ,IAAA,GACAhJ,EAAAuT,KAAA,GACAvT,EAAAwT,QAAA,GACAxT,EAAAyT,SAAA,GAIAzT,EAAA0T,GAAAnT,EACAP,EAAA2T,YAAApT,EACAP,EAAA4T,KAAArT,EACAP,EAAA6T,IAAAtT,EACAP,EAAA8T,eAAAvT,EACAP,EAAA+T,mBAAAxT,EACAP,EAAAiL,KAAA1K,EACAP,EAAAgU,gBAAAzT,EACAP,EAAAiU,oBAAA1T,EAEAP,EAAAkU,UAAA,SAAAjZ,GAAqC,UAErC+E,EAAAmU,QAAA,SAAAlZ,GACA,UAAAoF,MAAA,qCAGAL,EAAAoU,IAAA,WAA2B,WAC3BpU,EAAAqU,MAAA,SAAAC,GACA,UAAAjU,MAAA,mCAEAL,EAAAuU,MAAA,WAA4B","file":"adminHome.6f69924f9dfc71a0bcd1.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 46);\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import { nbind } from \"q\";\n\nconst server = window.location.origin;\nconst serverURL =\n      window.location.hostname.indexOf('localhost') !== -1\n        ? 'https://nike-market.herokuapp.com'\n        : server;\n\n// Get the modal\nconst modal = document.getElementById(\"isModal\");\n\n// Get the button that opens the modal\nconst btn = document.getElementById(\"myBtn\");\n\n// Get the <span> element that closes the modal\nconst span = document.getElementsByClassName(\"close-modal\")[0];\nconst cancelButton = document.querySelector(\".cancelbtn\");\nconst input = document.querySelector(\"#userName\");\nconst output = document.querySelector(\"#userPassword\");\nconst formContent = document.querySelector(\".container__form\");\nconst buttonLogin = document.querySelector(\"#userRegister\");\nconst registerButton = document.getElementById(\"register\");\nconst userLogin = document.getElementById(\"userLogin\");\nlet userRegistration = {};\n\n//  const loginBtn = formContent.querySelector('#userLogin');\n\n// console.log(login);\n\n// When the user clicks on the button, open the modal\nbtn.onclick = function() {\n  if ((btn.textContent = \"Log in\")) {\n    modal.style.display = \"block\";\n  }\n};\n\n// When the user clicks on <span> (x), close the modal\nspan.onclick = function() {\n  modal.style.display = \"none\";\n};\n\n// When the user clicks anywhere outside of the modal, close it\nwindow.onclick = function(event) {\n  if (event.target == modal) {\n    modal.style.display = \"none\";\n  }\n};\n// When the user clicks cencel modal form close\ncancelButton.onclick = function(event) {\n  if (event.target === cancelButton) {\n    modal.style.display = \"none\";\n  }\n};\n\ninput.addEventListener(\"input\", e => {\n  // event.preventDefault();\n  userRegistration.email = e.target.value;\n});\n\n// input.addEventListener((inputOur) {\n//   let re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n//   return re.test(String(inputOur).toLowerCase())\n// })\n\n//   alert ('enter 7')\n//   }else {userRegistration.password = e.target.value}\n// })\n\noutput.addEventListener(\"input\", e => {\n  // event.preventDefault();\n  // if (output.lengths <= 6) {\n  //   alert(\"enter 7\");\n  // } else {\n  userRegistration.password = e.target.value;\n  // }\n});\nconsole.log(userRegistration);\nconsole.log(output);\n\nbuttonLogin.addEventListener(\"click\", e => {\n  event.preventDefault();\n\n  fetch(`${serverURL}/api/auth/signup`, {\n    method: \"post\",\n    headers: {\n      \"content-type\": \"application/json\",\n      Authorization:\n        \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVkYzJhNjMyOWQ0ZDU2ODM5MDJlM2E2ZCIsImlhdCI6MTU3MzA0ODQzOCwiZXhwIjoxNTczNjUzMjM4fQ.oIVNWXUo7GwiDt2o1xXf4r1wqffjEUyBerjZF6b_F-k\"\n    },\n    body: JSON.stringify(userRegistration)\n  })\n    .then(res => res.json())\n    .then(data => console.log(\"data\", data));\n\n  modal.style.display = \"none\";\n  output.value = \"\";\n  input.value = \"\";\n\n  userLogin.addEventListener(\"click\", e => {\n    event.preventDefault();\n    modal.style.display = \"none\";\n    output.value = \"\";\n    input.value = \"\";\n    fetch(`${serverURL}/api/auth/signin`, {\n      method: \"post\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Authorization:\n          \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVkYzJhNjMyOWQ0ZDU2ODM5MDJlM2E2ZCIsImlhdCI6MTU3MzA0ODQzOCwiZXhwIjoxNTczNjUzMjM4fQ.oIVNWXUo7GwiDt2o1xXf4r1wqffjEUyBerjZF6b_F-k\"\n      },\n      body: JSON.stringify(userRegistration)\n    })\n      .then(res => res.json())\n      .then(data => {\n        //add token to localstorage. Don't delete\n        if (localStorage.getItem(\"token\")) {\n          return;\n        } else {\n          localStorage.setItem(\"token\", data.token);\n          document.location.href = \"admin-products.html\";\n        }\n      });\n  });\n});\n","// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2017 Kris Kowal under the terms of the MIT\n * license found at https://github.com/kriskowal/q/blob/v1/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    \"use strict\";\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\" && typeof module === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\n        // Prefer window over self for add-on scripts. Use self for\n        // non-windowed contexts.\n        var global = typeof window !== \"undefined\" ? window : self;\n\n        // Get the `window` object, save the previous Q global\n        // and initialize Q as a global.\n        var previousQ = global.Q;\n        global.Q = definition();\n\n        // Add a noConflict function so Q can be removed from the\n        // global namespace.\n        global.Q.noConflict = function () {\n            global.Q = previousQ;\n            return this;\n        };\n\n    } else {\n        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n    // queue for late tasks, used by unhandled rejection tracking\n    var laterQueue = [];\n\n    function flush() {\n        /* jshint loopfunc: true */\n        var task, domain;\n\n        while (head.next) {\n            head = head.next;\n            task = head.task;\n            head.task = void 0;\n            domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n            runSingle(task, domain);\n\n        }\n        while (laterQueue.length) {\n            task = laterQueue.pop();\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    // runs a single function in the async queue\n    function runSingle(task, domain) {\n        try {\n            task();\n\n        } catch (e) {\n            if (isNodeJS) {\n                // In node, uncaught exceptions are considered fatal errors.\n                // Re-throw them synchronously to interrupt flushing!\n\n                // Ensure continuation if the uncaught exception is suppressed\n                // listening \"uncaughtException\" events (as domains does).\n                // Continue in next event to avoid tick recursion.\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n\n                throw e;\n\n            } else {\n                // In browsers, uncaught exceptions are not fatal.\n                // Re-throw them asynchronously to avoid slow-downs.\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n\n        if (domain) {\n            domain.exit();\n        }\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process === \"object\" &&\n        process.toString() === \"[object process]\" && process.nextTick) {\n        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n        // To see through fake Node environments:\n        // * Mocha test runner - exposes a `process` global without a `nextTick`\n        // * Browserify - exposes a `process.nexTick` function that uses\n        //   `setTimeout`. In this case `setImmediate` is preferred because\n        //    it is faster. Browserify's `process.toString()` yields\n        //   \"[object Object]\", while in a real Node environment\n        //   `process.toString()` yields \"[object process]\".\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n    nextTick.runAfter = function (task) {\n        laterQueue.push(task);\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_defineProperty = Object.defineProperty || function (obj, prop, descriptor) {\n    obj[prop] = descriptor.value;\n    return obj;\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {\n                object_defineProperty(error, \"__minimumStackCounter__\", {value: p.stackCounter, configurable: true});\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        var stack = filterStackString(concatedStacks);\n        object_defineProperty(error, \"stack\", {value: stack, configurable: true});\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n/**\n * The counter is used to determine the stopping point for building\n * long stack traces. In makeStackTraceLong we walk backwards through\n * the linked list of promises, only stacks which were created before\n * the rejection are concatenated.\n */\nvar longStackCounter = 1;\n\n// enable long stacks if Q_DEBUG is set\nif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n}\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            Q.nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n            promise.stackCounter = longStackCounter++;\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n\n        if (Q.longStackSupport && hasStacks) {\n            // Only hold a reference to the new promise if long stacks\n            // are enabled to reduce memory usage\n            promise.source = newPromise;\n        }\n\n        array_reduce(messages, function (undefined, message) {\n            Q.nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            Q.nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Q can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become settled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be settled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function (resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function (answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\nQ.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n};\n\n/**\n * Works almost like \"finally\", but not called for rejections.\n * Original resolution value is passed through callback unaffected.\n * Callback may return a promise that will be awaited for.\n * @param {Function} callback\n * @returns {Q.Promise}\n * @example\n * doSomething()\n *   .then(...)\n *   .tap(console.log)\n *   .then(...);\n */\nPromise.prototype.tap = function (callback) {\n    callback = Q(callback);\n\n    return this.then(function (value) {\n        return callback.fcall(value).thenResolve(value);\n    });\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return object instanceof Promise;\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar reportedUnhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n            if (array_indexOf(unhandledRejections, promise) !== -1) {\n                process.emit(\"unhandledRejection\", reason, promise);\n                reportedUnhandledRejections.push(promise);\n            }\n        });\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n            Q.nextTick.runAfter(function () {\n                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n                if (atReport !== -1) {\n                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n                    reportedUnhandledRejections.splice(atReport, 1);\n                }\n            });\n        }\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return Q(result.value);\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return Q(exception.value);\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var pendingCount = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++pendingCount;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--pendingCount === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (pendingCount === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Returns the first resolved promise of an array. Prior rejected promises are\n * ignored.  Rejects only if all promises are rejected.\n * @param {Array*} an array containing values or promises for values\n * @returns a promise fulfilled with the value of the first resolved promise,\n * or a rejected promise if all promises are rejected.\n */\nQ.any = any;\n\nfunction any(promises) {\n    if (promises.length === 0) {\n        return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n        var promise = promises[index];\n\n        pendingCount++;\n\n        when(promise, onFulfilled, onRejected, onProgress);\n        function onFulfilled(result) {\n            deferred.resolve(result);\n        }\n        function onRejected(err) {\n            pendingCount--;\n            if (pendingCount === 0) {\n                var rejection = err || new Error(\"\" + err);\n\n                rejection.message = (\"Q can't get fulfillment value from any promise, all \" +\n                    \"promises were rejected. Last error message: \" + rejection.message);\n\n                deferred.reject(rejection);\n            }\n        }\n        function onProgress(progress) {\n            deferred.notify({\n                index: index,\n                value: progress\n            });\n        }\n    }, undefined);\n\n    return deferred.promise;\n}\n\nPromise.prototype.any = function () {\n    return any(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    if (!callback || typeof callback.apply !== \"function\") {\n        throw new Error(\"Q can't apply finally callback\");\n    }\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        Q.nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {Any*} custom error message or Error object (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n};\n\nPromise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        if (!error || \"string\" === typeof error) {\n            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n            error.code = \"ETIMEDOUT\";\n        }\n        deferred.reject(error);\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    if (callback === undefined) {\n        throw new Error(\"Q can't wrap an undefined function\");\n    }\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            Q.nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            Q.nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\nQ.noConflict = function() {\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","import '../scss/main.scss';\r\nimport './page.scss';\r\nimport '../js/indexadmin';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"],"sourceRoot":""}
